@using IdentityServerAspNetIdentity.Pages.Components.HtmlModal
@model IdentityServerAspNetIdentity.Pages.Components.StringArrayContainer.StringArrayContainerViewModel



<div class="  @Model.CssClass">
    <div class="form-row text-form-row">
        <label class="form-label">@Model.Title</label>
        <div class="text-array-container " id="@Model.Id">
            @if(!Model.Current.Any())
            {
                <label class="empty-list-label">
                    No entries for @Model.Title   
                </label>
            }
            
            @for(int sourceIndex = 0; sourceIndex < Model.Current.Count(); sourceIndex++)
            {

                var item = Model.Current.ElementAt(sourceIndex);
               
                var name = @Model.Name.Replace("[", "").Replace("]", "") + "[" + sourceIndex.ToString() + "]";
                var currentId = @Model.Name.Replace("[", "").Replace("]", "") + "-" + sourceIndex;

                <div class="text-array-container-row">
                    <input
                        name="@name"
                        value="@item"
                        type="text"
                        class="form-input"/>

                    @if (Model.AllowDelete)
                    {
                        <button type="button" id="toggle-button-@sourceIndex" class="delete-icon-button"
                                onclick="toggleRemoveForStringContainer(this, '@Model.DeletedItemsName')"></button>
                    }
                </div>
                sourceIndex++;

            }

            <input type="hidden" name="@Model.DeletedItemsName" value=""/>


        </div>
    </div>

    @if (Model.AllowAdd)
    {
        var modalId = $"{Model.Id}Modal";
        var templateId = $"{Model.Id}Template";
            
        var function = $@"addNewItem('{@Model.Title}','new{@Model.Id}Input','{@Model.Id}Template','{@Model.Id}','text-array-container-row')";
            


        <template id="@templateId">
            @{ var name = @Model.Name.Replace("[", "").Replace("]", "") + "[_replace-with-index_]"; }
            <div class="text-array-container-row">
                <input
                    name="@name"
                    value=""
                    type="text"
                    class="form-input"/>
                @if (Model.AllowDelete)
                {
                    <button type="button" id="toggle-button-_replace-with-index_" class="delete-icon-button"
                            onclick="toggleRemoveForStringContainer(this, '@Model.DeletedItemsName')"></button>
                }
            </div>


        </template>
        
        <div class="form-row">
            <label class="form-label"></label>
            <button
                type="button"
                class="success-button btn-small"
                data-ck-modal-target="@modalId">
                Add @Model.Title   
            </button>
        </div>

        var newRoleModalViewModel = new ModalViewModel(
            @modalId,
            "Add New " + @Model.Title,
            "Enter the following information:",
            "Add " + @Model.Title,
            "Close",
            function,
            new ModalInputs($"new{@Model.Id}Input", @Model.Title)
        );
        <vc:html-modal model="newRoleModalViewModel"/>

        
        
    }
</div>

