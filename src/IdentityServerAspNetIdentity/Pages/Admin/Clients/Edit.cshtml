@page "{clientId?}"
@using System.Linq.Expressions
@using IdentityDataModels
@using IdentityServerAspNetIdentity.Pages.Admin.Clients
@using IdentityServerAspNetIdentity.Pages.Components.HtmlModal
@using IdentityServerAspNetIdentity.Pages.Components.SelectionContainer
@using IdentityServerAspNetIdentity.Pages.Components.StringArrayContainer
@using IdentityServerAspNetIdentity.TagHelpers.Fields
@using IdentityServerAspNetIdentity.TagHelpers.FormRow
@using IdentityServerAspNetIdentity.TagHelpers.Tabs
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider MetadataProvider
@model IdentityServerAspNetIdentity.Pages.Admin.Clients.Edit

<h1>@(Model.Client.Id == 0 ? "Create New Client" : $"Edit {Model.Client.ClientId}")</h1>
<form method="post">
    @Html.AntiForgeryToken()
    <tab id="clientDetails">
        <tab-item header="Client Information">
            
            
            <form-row-text-input asp-for="@Model.Client.ClientId" hidden="true"></form-row-text-input> 
            <form-row-text-input asp-for="@Model.Client.ClientName" ></form-row-text-input>
            <form-row-text-input asp-for="@Model.Client.Description"></form-row-text-input>
            <form-row-text-input asp-for="@Model.Client.ClientUri"></form-row-text-input>
            </tab-item>
        <tab-item header="Security">

            <div>
                <div id="secretsHolder">
                    @for (int i = 0; i < Model.Client.ClientSecrets.Count; i++)
                    {
                        <form-row-text-input asp-for="@Model.Client.ClientSecrets[i].Description"></form-row-text-input>
                        <form-row-text-input asp-for="@Model.Client.ClientSecrets[i].Secret" hidden="true"></form-row-text-input>
                    }
                </div>


                <form-row-container>
                    <button type="button" class="success-button btn-small" data-ck-modal-target="addClientSecretModal">
                        Add Secret
                    </button>
                </form-row-container>

                <template id="clientSecretTemplate">
                    <form-template-row-text-input base-type="@Model.Client.ClientSecrets" asp-for="@Model.Client.ClientSecrets.FirstOrDefault().Description"></form-template-row-text-input>
                    <form-template-row-text-input base-type="@Model.Client.ClientSecrets" asp-for="@Model.Client.ClientSecrets.FirstOrDefault().Secret" hidden="true"></form-template-row-text-input>
                </template>


            </div>
            <form-row-checkbox as-slider="true" asp-for="@Model.Client.RequireConsent" ></form-row-checkbox>
            <form-row-checkbox as-slider="true" asp-for="@Model.Client.AllowAccessTokensViaBrowser" ></form-row-checkbox>
            
            @* <form-row label="Require Consent" for="@Model.Client.RequireConsent"></form-row> *@
            @* <form-row label="AllowAccessTokens Via Browser" for="@Model.Client.AllowAccessTokensViaBrowser"></form-row> *@
            @* <form-row label="AccessToken Lifetime" for="@Model.Client.AccessTokenLifetime"></form-row> *@
            <form-row-numeric-slider-input asp-for="@Model.Client.AccessTokenLifetime"></form-row-numeric-slider-input>

        </tab-item>
        <tab-item header="grant Types">


            @* <form-row label="Require PKCE" for="@Model.Client.RequirePkce"></form-row> *@
            <form-row-checkbox as-slider="true" asp-for="@Model.Client.RequirePkce" ></form-row-checkbox>

            <form-row-container label="grant Types">

                <vc:selection-container
                    id="selection-grants-container"
                    source="@Model.Client.AvailableGrantTypes.Select(x => new SelectionContainerItemModel { Id = x, Value = x })"
                    selected="@Model.Client.AllowedGrantTypes.Select(x => new SelectionContainerItemModel { Id = x, Value = x })"
                    name="Client.AllowedGrantTypes[]"
                    title="AllowedGrantTypes"
                    css-class="check-group-container  with-divider with-bottom-divider"/>


            </form-row-container>
            <form-row-container label="">
                <div class="button-container ">
                    <button type="button" class="btn-large info-button" data-ck-modal-target="addAppTypeModal">Set
                        defaults based off an application type
                    </button>
                </div>
            </form-row-container>

        </tab-item>
        <tab-item header="Scopes">

            <vc:selection-container
                id="selection-scopes-container"
                source="@Model.AvailableScopes.Select(x => new SelectionContainerItemModel { Id = x, Value = x })"
                selected="@Model.Client.AllowedScopes.Select(x => new SelectionContainerItemModel { Id = x, Value = x })"
                name="Client.AllowedScopes[]"
                title="AllowedScopes"
                allow-add="true"
                css-class="check-group-container  with-divider with-bottom-divider"/>


        </tab-item>
        <tab-item header="URIs">


            @* create entry for each @Model.Client.RedirectUris*@
           
            
                                          <vc:string-array-container
                                              id="update-uris-container"
                                              current="@Model.Client.RedirectUris"
                                              name="Client.RedirectUris[]"
                                              title="RedirectUris"
                                              allow-add="true"
                                              css-class="with-bottom-divider"
                                              deleted-items-name="DeletedRedirectUris">
                                              >
                                          
                                          </vc:string-array-container>

                                          <vc:string-array-container
                id="update-post-logout-uris-container"
                current="@Model.Client.PostLogoutRedirectUris"
                name="Client.PostLogoutRedirectUris[]"
                title="PostLogoutRedirectUris"
                allow-add="true"
                css-class="with-bottom-divider"
                deleted-items-name="DeletedPostLogoutRedirectUris">
            </vc:string-array-container>

            <vc:string-array-container
                id="update-allowed-cors-origins-container"
                current="@Model.Client.AllowedCorsOrigins"
                name="Client.AllowedCorsOrigins[]"
                title="AllowedCorsOrigins"
                allow-add="true"
                deleted-items-name="DeletedAllowedCorsOrigins">

            </vc:string-array-container>
        </tab-item>


    </tab>

    <div class="button-container">
        <button type="submit" class="primary-button">Save</button>
        <a asp-page="/Admin/Clients/Details" asp-route-clientId="@Model.Client.ClientId"
           class="secondary-button">Cancel</a>
    </div>
</form>

<dialog id="addAppTypeModal" class="standard-modal">
    <h2>Use Application Type</h2>
    <div class="modal-body">
        @foreach (var appType in Model.ApplicationGrantInfo.Applications)
        {
            <div class="check-selection-item">

                <input type="radio" name="AppTypes" value="@appType.Type"/>
                @* <label class="check-selection-label" for="AppTypes">@Model.Value</label> *@
                <label class="check-selection-label" >@appType.Type </label>

                <div class="modal-details">

                    <p><label>PCKE:</label>@appType.PKCE</p>
                    <p><label>Grant Type:</label>@appType.GrantType</p>
                    @appType.Description
                </div>
            </div>
        }
    </div>
    <div class="button-container">
        <button id="use-selected-apptype" type="button" class="success-button"
                onclick="setGrantsAndPkceFromDialog()"
                data-ck-modal-target-close="addAppTypeModal">
            Use Selected
        </button>
        <button id="cancel-use-selected-apptype" type="button"
                class="danger-button"
                data-ck-modal-target-close="addAppTypeModal">
            Cancel
        </button>
    </div>
</dialog>

@{
    var jsonGrantInfo = System.Text.Json.JsonSerializer.Serialize(Model.ApplicationGrantInfo);
}
<script>

    const applicationGrantInfo = @Html.Raw(jsonGrantInfo);


    function getPkceAndGrantInfoByType(data, type) {
        if (!data || !data.Applications) {
            console.error("Invalid data structure.");
            return [];
        }

        return data.Applications
            .filter(app => app.Type === type) // Filter by Type
            .map(app => ({
                PKCE: app.PKCE,
                GrantType: app.GrantType
            }));
    }

    function setGrantsAndPkceFromDialog() {
        const selectedRadio = document.querySelector('input[name="AppTypes"]:checked');
        if (selectedRadio) {
            const selectedValue = selectedRadio.value;
            const pkceAndGrantInfo = getPkceAndGrantInfoByType(applicationGrantInfo, selectedValue);

            if (pkceAndGrantInfo.length === 0) {
                console.error("No PKCE and Grant Info found for the selected value.");
                return;
            }

            const grantTypesContainer = document.getElementById("selection-grants-container");
            grantTypesContainer
                .querySelectorAll('input[name="Client.AllowedGrantTypes[]"]')
                .forEach(input => {
                    input.checked = pkceAndGrantInfo.some(info => info.GrantType === input.value);
                });

            const pkceInput = document.getElementsByName("Client.RequirePkce")[0];
            pkceInput.checked = pkceAndGrantInfo[0].PKCE === "Required";


        }
    }
</script>




<script>
    // addNewSecret
    function addNewSecret() {
        var secret = document.getElementById("newSecretInput").value;
        var secretConfirm = document.getElementById("newSecretInputConfirm").value;
        var description = document.getElementById("newSecretDescriptionInput").value;

        if (secret !== secretConfirm) {
            alert("Secrets do not match");
            return;
        }
        // get the index of the new secret amount of field-containers with name starting with Client.ClientSecrets[ and ending with ].Description
        var secrets = document.querySelectorAll('input[name^="Client.ClientSecrets["][name$="].Secret"]');

        var index = secrets.length;
        var newSeceret = cloneClientSecretTemplate(index, description, secret);
        // if secretsHolder has a button add new node before it

        var selectionContainer = document.getElementById("secretsHolder");

        selectionContainer.appendChild(newSeceret);

    }

    function cloneClientSecretTemplate(index, descriptionValue, secretValue) {
        // Access the template
        const template = document.getElementById('clientSecretTemplate');

        // Get the template content as a string
        let templateHTML = template.innerHTML;

        // Replace the placeholder {{index}} with the provided index
        templateHTML = templateHTML.replace(/replace_with_index/g, index);

        // Create a temporary container to parse the template into DOM elements
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = templateHTML;

        // Select the parsed template content
        const clonedElement = tempDiv.firstElementChild;

        // Set the value for the description input
        const descriptionInput = clonedElement.querySelector(`input[name="Client.ClientSecrets[${index}].Description"]`);
        if (descriptionInput) {
            descriptionInput.value = descriptionValue || ''; // Default to an empty string if no value is provided
        }

        // Set the value for the secret input
        const secretInput = clonedElement.querySelector(`input[name="Client.ClientSecrets[${index}].Secret"]`);
        if (secretInput) {
            secretInput.value = secretValue || ''; // Default to an empty string if no value is provided
        }

        return clonedElement;
    }
</script>
@{
    var newClientSecretsViewModal = new ModalViewModel(
        "addClientSecretModal",
        "Add Client Secret",
        "Enter the following information:",
        "Add Secret",
        "Close",
        "addNewSecret()",
        new ModalInputs("newSecretInput", "Secret", "password"),
        new ModalInputs("newSecretInputConfirm", "Confirm Secret", "password"),
        new ModalInputs("newSecretDescriptionInput", "Description", "text")
    );
}
<vc:html-modal model="newClientSecretsViewModal"/>
