@page "{clientId}"
@using System.Linq.Expressions
@using IdentityDataModels
@using IdentityServerAspNetIdentity.Pages.Admin.Clients
@using IdentityServerAspNetIdentity.Pages.Components.HtmlModal
@using IdentityServerAspNetIdentity.TagHelpers.Fields
@using IdentityServerAspNetIdentity.TagHelpers.FormRow
@using IdentityServerAspNetIdentity.TagHelpers.Tabs
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider MetadataProvider
@model IdentityServerAspNetIdentity.Pages.Admin.Clients.Edit

<h1>Edit @Model.Client.ClientId</h1>
<form method="post">
    @Html.AntiForgeryToken()
    <tab id="clientDetails">
        <tab-item header="Client Information">
            <input type="hidden" asp-for="@Model.Client.ClientId"/>
            <form-row for="@Model.Client.ClientName"></form-row>
            <form-row for="@Model.Client.Description"></form-row>
            <form-row for="@Model.Client.ClientUri"></form-row>
        </tab-item>
        <tab-item header="Security">

            <div>
            <div id="secretsHolder">
                @for (int i = 0; i < Model.Client.ClientSecrets.Count; i++)
                {
                    <form-row for="@Model.Client.ClientSecrets[i].Description"></form-row>
                    <form-row for="@Model.Client.ClientSecrets[i].Secret" hidden="true"></form-row>
                }
            </div>


                <form-row-container>
                    <button type="button" class="success-button btn-small" data-ck-modal-target="addClientSecretModal">Add Secret
                    </button>
                </form-row-container>

                <template id="clientSecretTemplate">
                    <form-row-template for="@Model.Client.ClientSecrets.FirstOrDefault().Description" root="@Model.Client.Description"></form-row-template>
                    <form-row-template for="@Model.Client.ClientSecrets.FirstOrDefault().Secret" root="@Model.Client.ClientSecrets" hidden="true"></form-row-template>
                </template>


            </div>
            <form-row label="Require Consent" for="@Model.Client.RequireConsent"></form-row>
            <form-row label="AllowAccessTokens Via Browser" for="@Model.Client.AllowAccessTokensViaBrowser"></form-row>
            <form-row label="AccessToken Lifetime" for="@Model.Client.AccessTokenLifetime"></form-row>

        </tab-item>
        <tab-item header="grant Types">
            <form-row label="Require PKCE" for="@Model.Client.RequirePkce"></form-row>
            <form-row-container label="grant Types">

                <vc:selection-container
                    id="selection-grants-container"
                    source="@Model.Client.AvailableGrantTypes"
                    selected="@Model.Client.AllowedGrantTypes"
                    name="Client.AllowedGrantTypes[]"
                    title="AllowedGrantTypes"
                    css-class="check-group-container  with-divider with-bottom-divider"/>
            </form-row-container>
            <form-row-container label="application Types">


            <vc:selection-container
                    id="selection-app-types-container"
                    source="@Model.AppTypes"
                    name="AppTypes"
                    title="Application Types"
                    as-radio="true"
                    source-details="@Model.GrantTypes"
                    css-class="check-group-container  with-divider with-bottom-divider"/>


                @{
                    var jsonGrantInfo = System.Text.Json.JsonSerializer.Serialize(Model.ApplicationGrantInfo);
                }
            <script>

                const applicationGrantInfo = @Html.Raw(jsonGrantInfo);


                function getPkceAndGrantInfoByType(data, type) {
                    if (!data || !data.Applications) {
                        console.error("Invalid data structure.");
                        return [];
                    }

                    return data.Applications
                        .filter(app => app.Type === type) // Filter by Type
                        .map(app => ({
                            PKCE: app.PKCE,
                            GrantType: app.GrantType
                        }));
                }
                
                
                
                
                // on document ready
                document.addEventListener("DOMContentLoaded", function () {
                    // get the radio buttons within selection-app-types-container
                    const radios = document.querySelectorAll("#selection-app-types-container input[type='radio']");
                    
                    // add event listener to each radio button
                    radios.forEach(function (radio) {
                        radio.addEventListener("change", function () {
                            // get the selected radio button
                            const selectedRadio = document.querySelector('input[name="AppTypes"]:checked');
                            // get the value of the selected radio button
                            const selectedValue = selectedRadio.value;
                            
                            // get the pkce and grant info by the selected value
                            const pkceAndGrantInfo = getPkceAndGrantInfoByType(applicationGrantInfo, selectedValue);
                            
                            if (pkceAndGrantInfo.length === 0) {
                                console.error("No PKCE and Grant Info found for the selected value.");
                                return;                                
                            }
                            
                            // get the grant types selection container
                            const grantTypesContainer = document.getElementById("selection-grants-container");
                            // get the grant types selection items
                            const grantTypes = grantTypesContainer.querySelectorAll(".check-selection-item");
                            
                            // loop through the grant types selection items
                            grantTypes.forEach(function (grantType) {
                                const grantTypeValue = grantType.querySelector("input").value;
                                // check if the grant type value is in the pkceAndGrantInfo
                                const isGrantTypeInPkceAndGrantInfo = pkceAndGrantInfo.some(function (info) {
                                    return info.GrantType === grantTypeValue;
                                });
                                
                                // if the grant type is in the pkceAndGrantInfo
                                if (isGrantTypeInPkceAndGrantInfo) {
                                    // check the grant type
                                    grantType.querySelector("input").checked = true;
                                } else {
                                    // uncheck the grant type
                                    grantType.querySelector("input").checked = false;
                                }
                                
                            });
                            
                            // set the pkce value
                            const pkceInput = document.getElementsByName("Client.RequirePkce")[0];
                            // if the pkce value is Required
                            pkceInput.checked = pkceAndGrantInfo[0].PKCE === "Required";
                            
                            
                            
                            
                            
                            
                            
                                                        
                       
                        });
                    });
                }); 
                
            
            </script>


            </form-row-container>


        </tab-item>
        <tab-item header="Scopes">

            <vc:selection-container
                id="selection-scopes-container"
                source="@Model.AvailableScopes"
                selected="@Model.Client.AllowedScopes"
                name="Client.AllowedScopes[]"
                title="AllowedScopes"
                allow-add="true"
                css-class="check-group-container  with-divider with-bottom-divider"/>


        </tab-item>
        <tab-item header="URIs">

            <vc:string-array-container
                id="update-uris-container"
                current="@Model.Client.RedirectUris"
                name="Client.RedirectUris[]"
                title="RedirectUris"
                allow-add="true"
                css-class="with-bottom-divider"
                deleted-items-name="DeletedRedirectUris">
            >

            </vc:string-array-container>

            <vc:string-array-container
                id="update-post-logout-uris-container"
                current="@Model.Client.PostLogoutRedirectUris"
                name="Client.PostLogoutRedirectUris[]"
                title="PostLogoutRedirectUris"
                allow-add="true"
                css-class="with-bottom-divider"
                deleted-items-name="DeletedPostLogoutRedirectUris">
            </vc:string-array-container>

            <vc:string-array-container
                id="update-allowed-cors-origins-container"
                current="@Model.Client.AllowedCorsOrigins"
                name="Client.AllowedCorsOrigins[]"
                title="AllowedCorsOrigins"
                allow-add="true"
                deleted-items-name="DeletedAllowedCorsOrigins">

            </vc:string-array-container>
        </tab-item>


    </tab>

    <div class="button-container">
        <button type="submit" class="primary-button">Save</button>
        <a asp-page="/Admin/Clients/Details" asp-route-clientId="@Model.Client.ClientId" class="secondary-button">Cancel</a>
    </div>
</form>




<script>
    // addNewSecret
    function addNewSecret() {
        var secret = document.getElementById("newSecretInput").value;
        var secretConfirm = document.getElementById("newSecretInputConfirm").value;
        var description = document.getElementById("newSecretDescriptionInput").value;

        if (secret !== secretConfirm) {
            alert("Secrets do not match");
            return;
        }
        // get the index of the new secret amount of field-containers with name starting with Client.ClientSecrets[ and ending with ].Description
        var secrets = document.querySelectorAll('input[name^="Client.ClientSecrets["][name$="].Secret"]');
        
        var index = secrets.length;
        var newSeceret = cloneClientSecretTemplate(index, description, secret);
        // if secretsHolder has a button add new node before it
        
        var selectionContainer = document.getElementById("secretsHolder");
        
            selectionContainer.appendChild(newSeceret);
        
    }
    function cloneClientSecretTemplate(index, descriptionValue, secretValue) {
        // Access the template
        const template = document.getElementById('clientSecretTemplate');

        // Get the template content as a string
        let templateHTML = template.innerHTML;

        // Replace the placeholder {{index}} with the provided index
        templateHTML = templateHTML.replace(/replace_with_index/g, index);

        // Create a temporary container to parse the template into DOM elements
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = templateHTML;

        // Select the parsed template content
        const clonedElement = tempDiv.firstElementChild;

        // Set the value for the description input
        const descriptionInput = clonedElement.querySelector(`input[name="Client.ClientSecrets[${index}].Description"]`);
        if (descriptionInput) {
            descriptionInput.value = descriptionValue || ''; // Default to an empty string if no value is provided
        }

        // Set the value for the secret input
        const secretInput = clonedElement.querySelector(`input[name="Client.ClientSecrets[${index}].Secret"]`);
        if (secretInput) {
            secretInput.value = secretValue || ''; // Default to an empty string if no value is provided
        }

        return clonedElement;
    }
</script>
@{
    var newClientSecretsViewModal = new ModalViewModel(
        "addClientSecretModal",
        "Add Client Secret",
        "Enter the following information:",
        "Add Secret",
        "Close",
        "addNewSecret()",
        new ModalInputs("newSecretInput", "Secret", "password"),
        new ModalInputs("newSecretInputConfirm", "Confirm Secret", "password"),
        new ModalInputs("newSecretDescriptionInput", "Description", "text")
    );
}
<vc:html-modal model="newClientSecretsViewModal"/>